// Some nice comments

enum GPR {
    #[reg_names(["x0", "zero"])]
    X0,
    #[reg_names(["x1", "a1"])]
    X1,
    #[reg_names(["x2", "a2"])]
    X2,
    #[reg_names(["x3", "ra"])]
    X3,
    #[reg_names(["x4", "sp"])]
    X4,
    #[reg_names(["x5", "t0"])]
    X5,
    #[reg_names(["x6", "t1"])]
    X6,
    #[reg_names(["x7", "t2"])]
    X7
}

impl Register for GPR {
    fn get_num(self) -> i32 {
        0
    }
}

fn test(foo: i8) -> [i32] {
    [0, 1, 2, 3]
}

/// An example platform flag
flag PlatformFlag;

// Attached comment
instr_template RInstr<$funct7: bits<7>, $funct3: bits<3>, $mnemonic: str, $opcode: bits<7>> {
   rd: GPR,
   rs1: GPR,
   rs2: GPR,
}

encoding for RInstr {
    $funct7 @ self.rs2 @ self.rs1 @ $funct3 @ self.rd @ $opcode
}

asm for RInstr {
    "{$mnemonic} {self.rd}, {self.rs1}, {self.rs2}"
}

instr_template ALUInstr<$funct7: bits<7>, $funct3: bits<3>, $mnemonic: str> : RInstr<$funct7, $funct3, $mnemonic, 0b0110011> {}

instr ADD : ALUInstr<0b0000000, 0b000, "add">;
instr SUB : ALUInstr<0b0100000, 0b000, "sub">;
instr SLL : ALUInstr<0b0000000, 0b001, "sll">;
instr SLT : ALUInstr<0b0000000, 0b010, "slt">;
instr SLTU : ALUInstr<0b0000000, 0b011, "sltu">;
instr XOR : ALUInstr<0b0000000, 0b100, "xor">;
instr SRL : ALUInstr<0b0000000, 0b101, "srl">;
instr SRA : ALUInstr<0b0100000, 0b101, "sra">;
instr OR : ALUInstr<0b0000000, 0b110, "or">;
instr AND : ALUInstr<0b0000000, 0b111, "and">;

instr_template IInstr<$imm: bits<12>, $rs1: bits<5>, $funct3: bits<3>, $rd: bits<5>, $mnemonic: str, $opcode: bits<7>> {
    rd: Register,
    rs1: Register,
    imm: bits<12>,
}

encoding for IInstr {
    $imm @ $rs1 @ $funct3 @ $rd @ $opcode 
}

asm for IInstr {
    "{$mnemonic} {self.rd}, {self.rs1}, {self.imm}"
}

instr_template IALUInstr<$funct7: bits<7>, $funct3: bits<3>, $mnemonic: str> : IInstr<$funct7, $funct3, $mnemonic, 0b0010011> {}
